{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import matplotlib as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def sort_list(mass,ascending=True):\n",
    "    def quick(arr):\n",
    "        if len(arr)<=1:\n",
    "            return arr\n",
    "        if len(arr)==2 and arr[0]<arr[1]: \n",
    "            return arr\n",
    "        else:\n",
    "            left,right=[],[]\n",
    "            pivot=0\n",
    "            for i in arr [pivot+1::]: \n",
    "                if i <= arr[pivot]:\n",
    "                        left.append(i)\n",
    "                else:\n",
    "                    right.append(i)\n",
    "            return quick(left)+[arr[pivot]]+quick(right)\n",
    "    if not ascending:\n",
    "        mass[:]=[i for i in reversed(quick(mass))]\n",
    "        return\n",
    "    mass[:]=quick(mass)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import random"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "l=[random.random() for i in range(100)]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "sort_list(l,ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.9938395624787452,\n",
       " 0.9832984765158403,\n",
       " 0.9603088673067086,\n",
       " 0.954739586524554,\n",
       " 0.943330989780047,\n",
       " 0.9199057855940821,\n",
       " 0.9095510199949126,\n",
       " 0.8739668637713708,\n",
       " 0.8619883590424989,\n",
       " 0.8585957314679972,\n",
       " 0.8558603885944841,\n",
       " 0.845748343406753,\n",
       " 0.8204327922654373,\n",
       " 0.8159315835810008,\n",
       " 0.8092427677966543,\n",
       " 0.807009871346539,\n",
       " 0.8039569416470091,\n",
       " 0.8017947006672604,\n",
       " 0.7889952770550599,\n",
       " 0.7697096970009291,\n",
       " 0.7637184269167109,\n",
       " 0.7621686613778678,\n",
       " 0.7490728074191251,\n",
       " 0.7474666058763606,\n",
       " 0.7441561947203634,\n",
       " 0.7376952179587867,\n",
       " 0.734936895275392,\n",
       " 0.7320300786293851,\n",
       " 0.725808035234414,\n",
       " 0.7216484625904745,\n",
       " 0.7149126130964866,\n",
       " 0.700969821051812,\n",
       " 0.6865043910285807,\n",
       " 0.6793161232765593,\n",
       " 0.6764616757348128,\n",
       " 0.6640311288102448,\n",
       " 0.6261290696507292,\n",
       " 0.6150298476532648,\n",
       " 0.5999351951128213,\n",
       " 0.596690890435023,\n",
       " 0.5896713759385593,\n",
       " 0.5868429492852048,\n",
       " 0.5750261605542781,\n",
       " 0.5732651519942249,\n",
       " 0.5650207890886624,\n",
       " 0.5612974453160193,\n",
       " 0.5488359241789375,\n",
       " 0.5436926316073185,\n",
       " 0.5125119200927656,\n",
       " 0.5120841858480891,\n",
       " 0.5072413356147996,\n",
       " 0.50270989330243,\n",
       " 0.4860791073247609,\n",
       " 0.4801755912138277,\n",
       " 0.4801546003806324,\n",
       " 0.4756575087930105,\n",
       " 0.47415484751616666,\n",
       " 0.4717517494611019,\n",
       " 0.46516879838555336,\n",
       " 0.4532752025364012,\n",
       " 0.44833367310864336,\n",
       " 0.43471293646125875,\n",
       " 0.42553288140172585,\n",
       " 0.41382530726183153,\n",
       " 0.39971051239555644,\n",
       " 0.39420763708297213,\n",
       " 0.3608065838703125,\n",
       " 0.35656225837439226,\n",
       " 0.3454911064575422,\n",
       " 0.33989020897004973,\n",
       " 0.331577978045586,\n",
       " 0.3249703296241988,\n",
       " 0.31646921610958123,\n",
       " 0.29847923594568004,\n",
       " 0.2613394773677902,\n",
       " 0.23135705554318797,\n",
       " 0.22313669688056592,\n",
       " 0.21599068785370557,\n",
       " 0.2015694991736452,\n",
       " 0.17965958392184145,\n",
       " 0.15985912799085,\n",
       " 0.14930400602938854,\n",
       " 0.12646587515483976,\n",
       " 0.11679141044772556,\n",
       " 0.10804144408224392,\n",
       " 0.10647066290616347,\n",
       " 0.10549009473553383,\n",
       " 0.10452083082949637,\n",
       " 0.10174729482471445,\n",
       " 0.09497311972217493,\n",
       " 0.09455237559343654,\n",
       " 0.07310743986490398,\n",
       " 0.07127162133319986,\n",
       " 0.056816341096645906,\n",
       " 0.050965038855835254,\n",
       " 0.03421167852327556,\n",
       " 0.030989248998906316,\n",
       " 0.026731898936308895,\n",
       " 0.022839246051878148,\n",
       " 0.022458276593479543]"
      ]
     },
     "execution_count": 97,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "l"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.99258772086454,\n",
       " 0.9828525177846654,\n",
       " 0.9818970089522533,\n",
       " 0.9684942607191167,\n",
       " 0.949250931713794,\n",
       " 0.924347813743559,\n",
       " 0.9220450185356686,\n",
       " 0.9121942711921041,\n",
       " 0.9018107645697802,\n",
       " 0.9016099475431302,\n",
       " 0.8975938935173375,\n",
       " 0.8929879957229446,\n",
       " 0.859721847275602,\n",
       " 0.8308341888586049,\n",
       " 0.813299612323764,\n",
       " 0.8108290258695474,\n",
       " 0.7918516416592374,\n",
       " 0.7913997610406215,\n",
       " 0.7901350668160176,\n",
       " 0.7889347295883432,\n",
       " 0.7792067312635496,\n",
       " 0.7654249101706618,\n",
       " 0.7548595414081922,\n",
       " 0.7164489850244322,\n",
       " 0.7048706564946637,\n",
       " 0.6981872165725971,\n",
       " 0.6892581782196243,\n",
       " 0.6881931269791554,\n",
       " 0.679463695029337,\n",
       " 0.6762664041580408,\n",
       " 0.6689569885991969,\n",
       " 0.6605824937393782,\n",
       " 0.6525928896769004,\n",
       " 0.6426173837296881,\n",
       " 0.6401114687959352,\n",
       " 0.6100497367405368,\n",
       " 0.6070607665887133,\n",
       " 0.581165530002168,\n",
       " 0.5761351070674569,\n",
       " 0.5705252998798553,\n",
       " 0.5676719306532809,\n",
       " 0.5673624923580576,\n",
       " 0.5569924177540836,\n",
       " 0.552950520124279,\n",
       " 0.525100069123866,\n",
       " 0.5084289848232362,\n",
       " 0.5075016702441517,\n",
       " 0.4584301288287569,\n",
       " 0.4400441106896247,\n",
       " 0.43875826972789744,\n",
       " 0.4386923522023789,\n",
       " 0.42650841536558937,\n",
       " 0.42618808726977775,\n",
       " 0.42097818298011414,\n",
       " 0.39610861709223244,\n",
       " 0.39112163967683644,\n",
       " 0.3811547705037295,\n",
       " 0.37621673289850177,\n",
       " 0.37462873599466795,\n",
       " 0.3743387497533811,\n",
       " 0.35756768963150487,\n",
       " 0.35551696477428574,\n",
       " 0.35243670174528097,\n",
       " 0.3233051162936147,\n",
       " 0.3147926007923809,\n",
       " 0.31238542720971607,\n",
       " 0.30544996421678794,\n",
       " 0.30451761569753055,\n",
       " 0.303422981302774,\n",
       " 0.26521715357707454,\n",
       " 0.26176048405115393,\n",
       " 0.2567244219305924,\n",
       " 0.2487243894154063,\n",
       " 0.2469621345474199,\n",
       " 0.24593748333627596,\n",
       " 0.24593116088004408,\n",
       " 0.24397376955007122,\n",
       " 0.2433582998096404,\n",
       " 0.24096397447103768,\n",
       " 0.2335959750587765,\n",
       " 0.22217401171185558,\n",
       " 0.21503978827061365,\n",
       " 0.20057334726697607,\n",
       " 0.19268510596318955,\n",
       " 0.17254323111212855,\n",
       " 0.16868700091539734,\n",
       " 0.1643968897274416,\n",
       " 0.14572679489127427,\n",
       " 0.14559326682527363,\n",
       " 0.11519580811822161,\n",
       " 0.11200904947470047,\n",
       " 0.10829860339651043,\n",
       " 0.09059126202693413,\n",
       " 0.07342582991002766,\n",
       " 0.04573858653110119,\n",
       " 0.039109273707158,\n",
       " 0.03893996412204248,\n",
       " 0.032828004715112935,\n",
       " 0.01944788508897355,\n",
       " 0.0073039636476118774]"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mysort"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.0073039636476118774,\n",
       " 0.01944788508897355,\n",
       " 0.032828004715112935,\n",
       " 0.03893996412204248,\n",
       " 0.039109273707158,\n",
       " 0.04573858653110119,\n",
       " 0.07342582991002766,\n",
       " 0.09059126202693413,\n",
       " 0.10829860339651043,\n",
       " 0.11200904947470047,\n",
       " 0.11519580811822161,\n",
       " 0.14559326682527363,\n",
       " 0.14572679489127427,\n",
       " 0.1643968897274416,\n",
       " 0.16868700091539734,\n",
       " 0.17254323111212855,\n",
       " 0.19268510596318955,\n",
       " 0.20057334726697607,\n",
       " 0.21503978827061365,\n",
       " 0.22217401171185558,\n",
       " 0.2335959750587765,\n",
       " 0.24096397447103768,\n",
       " 0.2433582998096404,\n",
       " 0.24397376955007122,\n",
       " 0.24593116088004408,\n",
       " 0.24593748333627596,\n",
       " 0.2469621345474199,\n",
       " 0.2487243894154063,\n",
       " 0.2567244219305924,\n",
       " 0.26176048405115393,\n",
       " 0.26521715357707454,\n",
       " 0.303422981302774,\n",
       " 0.30451761569753055,\n",
       " 0.30544996421678794,\n",
       " 0.31238542720971607,\n",
       " 0.3147926007923809,\n",
       " 0.3233051162936147,\n",
       " 0.35243670174528097,\n",
       " 0.35551696477428574,\n",
       " 0.35756768963150487,\n",
       " 0.3743387497533811,\n",
       " 0.37462873599466795,\n",
       " 0.37621673289850177,\n",
       " 0.3811547705037295,\n",
       " 0.39112163967683644,\n",
       " 0.39610861709223244,\n",
       " 0.42097818298011414,\n",
       " 0.42618808726977775,\n",
       " 0.42650841536558937,\n",
       " 0.4386923522023789,\n",
       " 0.43875826972789744,\n",
       " 0.4400441106896247,\n",
       " 0.4584301288287569,\n",
       " 0.5075016702441517,\n",
       " 0.5084289848232362,\n",
       " 0.525100069123866,\n",
       " 0.552950520124279,\n",
       " 0.5569924177540836,\n",
       " 0.5673624923580576,\n",
       " 0.5676719306532809,\n",
       " 0.5705252998798553,\n",
       " 0.5761351070674569,\n",
       " 0.581165530002168,\n",
       " 0.6070607665887133,\n",
       " 0.6100497367405368,\n",
       " 0.6401114687959352,\n",
       " 0.6426173837296881,\n",
       " 0.6525928896769004,\n",
       " 0.6605824937393782,\n",
       " 0.6689569885991969,\n",
       " 0.6762664041580408,\n",
       " 0.679463695029337,\n",
       " 0.6881931269791554,\n",
       " 0.6892581782196243,\n",
       " 0.6981872165725971,\n",
       " 0.7048706564946637,\n",
       " 0.7164489850244322,\n",
       " 0.7548595414081922,\n",
       " 0.7654249101706618,\n",
       " 0.7792067312635496,\n",
       " 0.7889347295883432,\n",
       " 0.7901350668160176,\n",
       " 0.7913997610406215,\n",
       " 0.7918516416592374,\n",
       " 0.8108290258695474,\n",
       " 0.813299612323764,\n",
       " 0.8308341888586049,\n",
       " 0.859721847275602,\n",
       " 0.8929879957229446,\n",
       " 0.8975938935173375,\n",
       " 0.9016099475431302,\n",
       " 0.9018107645697802,\n",
       " 0.9121942711921041,\n",
       " 0.9220450185356686,\n",
       " 0.924347813743559,\n",
       " 0.949250931713794,\n",
       " 0.9684942607191167,\n",
       " 0.9818970089522533,\n",
       " 0.9828525177846654,\n",
       " 0.99258772086454]"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "[i for i in reversed(mysort)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "ename": "FileNotFoundError",
     "evalue": "File b'train.csv' does not exist",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-99-81896e1979ff>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"train.csv\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m/usr/local/lib/python3.6/site-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36mparser_f\u001b[0;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, squeeze, prefix, mangle_dupe_cols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, dayfirst, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, escapechar, comment, encoding, dialect, tupleize_cols, error_bad_lines, warn_bad_lines, skipfooter, skip_footer, doublequote, delim_whitespace, as_recarray, compact_ints, use_unsigned, low_memory, buffer_lines, memory_map, float_precision)\u001b[0m\n\u001b[1;32m    644\u001b[0m                     skip_blank_lines=skip_blank_lines)\n\u001b[1;32m    645\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 646\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0m_read\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    647\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    648\u001b[0m     \u001b[0mparser_f\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__name__\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.6/site-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36m_read\u001b[0;34m(filepath_or_buffer, kwds)\u001b[0m\n\u001b[1;32m    387\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    388\u001b[0m     \u001b[0;31m# Create the parser.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 389\u001b[0;31m     \u001b[0mparser\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTextFileReader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    390\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    391\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mnrows\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mchunksize\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.6/site-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, f, engine, **kwds)\u001b[0m\n\u001b[1;32m    728\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moptions\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'has_index_names'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'has_index_names'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    729\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 730\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_make_engine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    731\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    732\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.6/site-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36m_make_engine\u001b[0;34m(self, engine)\u001b[0m\n\u001b[1;32m    921\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_make_engine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mengine\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'c'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    922\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mengine\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'c'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 923\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mCParserWrapper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moptions\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    924\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    925\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mengine\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'python'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.6/site-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, src, **kwds)\u001b[0m\n\u001b[1;32m   1388\u001b[0m         \u001b[0mkwds\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'allow_leading_cols'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindex_col\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1389\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1390\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reader\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_parser\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTextReader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msrc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1391\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1392\u001b[0m         \u001b[0;31m# XXX\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32mpandas/parser.pyx\u001b[0m in \u001b[0;36mpandas.parser.TextReader.__cinit__ (pandas/parser.c:4184)\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/parser.pyx\u001b[0m in \u001b[0;36mpandas.parser.TextReader._setup_parser_source (pandas/parser.c:8449)\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;31mFileNotFoundError\u001b[0m: File b'train.csv' does not exist"
     ]
    }
   ],
   "source": [
    "pd.read_csv(\"train.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
